name: Update Coverage on Sonar

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch para calcular cobertura'
        required: true
        default: 'main'

jobs:
  update-coverage:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout da branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.target_branch }}

      - name: Instalar dependências do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils bc make postgresql-client python3-venv

      - name: Configurar Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Esperar PostgreSQL ficar pronto
        run: |
          for i in {1..20}; do
            if pg_isready -h localhost -p 5432 -U testuser -d testdb; then
              echo "PostgreSQL está pronto!"
              # Criar extensão pg_trgm se necessário
              PGPASSWORD=testpass psql -h localhost -U testuser -d testdb -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"
              break
            fi
            echo "Aguardando PostgreSQL ficar pronto... Tentativa $i"
            sleep 3
          done

      - name: Instalar dependências do projeto
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -r requirements-dev.txt

      - name: Executar testes
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: |
          # Verificar conexão com o banco antes dos testes
          PGPASSWORD=testpass psql -h localhost -U testuser -d testdb -c "\conninfo"
          make test

      - name: Gerar relatório de cobertura
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: make coverage

      - name: Executar análise SonarQube
        run: make sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Extrair cobertura do coverage.xml
        id: extract
        run: |
          COVERAGE=$(xmllint --xpath 'string(/coverage/@line-rate)' coverage.xml)
          PERCENT=$(printf "%.0f" "$(echo "$COVERAGE * 100" | bc -l)")
          echo "coverage=$PERCENT" >> $GITHUB_OUTPUT
          echo "Cobertura de código: $PERCENT%"

      - name: Atualizar Quality Gate no SonarQube
        run: |
          # Primeiro obtemos informações detalhadas do Quality Gate
          QUALITY_GATE_DATA=$(curl -s "$SONAR_URL/api/qualitygates/show?name=python-sonar-lab" -u "$SONAR_TOKEN:")
          
          # Extraímos o ID da condição de coverage
          CONDITION_ID=$(echo "$QUALITY_GATE_DATA" | jq -r '.conditions[] | select(.metric == "coverage") | .id')
          
          if [ -z "$CONDITION_ID" ]; then
            echo "Erro: Não foi possível encontrar a condição de coverage no Quality Gate"
            exit 1
          fi
          
          # Formatamos o valor da cobertura
          COVERAGE_PERCENT=$(echo "${{ steps.extract.outputs.coverage }} * 100" | bc -l | awk '{printf "%.1f", $0}')
          
          # Atualizamos a condição
          curl -X POST "$SONAR_URL/api/qualitygates/update_condition" \
            -u "$SONAR_TOKEN:" \
            -d "id=$CONDITION_ID" \
            -d "metric=coverage" \
            -d "error=$COVERAGE_PERCENT" \
            -d "op=LT"
        env:
          SONAR_URL: https://seu-servidor-sonar
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
