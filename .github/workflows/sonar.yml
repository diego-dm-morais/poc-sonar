name: Update Coverage on Sonar

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch para calcular cobertura'
        required: true
        default: 'main'

env:
  DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

jobs:
  update-coverage:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 2s
          --health-retries 10

    steps:
      - name: Checkout da branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.target_branch }}

      - name: Configurar ambiente
        run: |
          # Instala apenas o essencial sem atualizar todos os pacotes
          sudo apt-get install -y --no-upgrade libxml2-utils bc make postgresql-client
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -r requirements-dev.txt

      - name: Configurar Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Verificar PostgreSQL
        run: |
          timeout 30s bash -c 'until pg_isready -h localhost -p 5432 -U testuser -d testdb; do sleep 2; done'
          PGPASSWORD=testpass psql -h localhost -U testuser -d testdb -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"

      - name: Executar testes e cobertura
        run: |
          make test
          make coverage

      - name: Executar an√°lise SonarQube
        run: make sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ variables.SONAR_URL }}

      - name: Processar cobertura e atualizar Quality Gate
        run: |
          COVERAGE=$(xmllint --xpath 'string(/coverage/@line-rate)' coverage.xml)
          PERCENT=$(printf "%.0f" "$(echo "$COVERAGE * 100" | bc -l)")
          echo "Cobertura: $PERCENT%"
          
          CONDITION_ID=$(curl -s "$SONAR_URL/api/qualitygates/show?name=python-sonar-lab" \
            -u "$SONAR_TOKEN:" | jq -r '.conditions[] | select(.metric == "coverage") | .id')
          
          curl -X POST "$SONAR_URL/api/qualitygates/update_condition" \
            -u "$SONAR_TOKEN:" \
            -d "id=$CONDITION_ID" \
            -d "metric=coverage" \
            -d "error=$PERCENT" \
            -d "op=LT"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ variables.SONAR_URL }}
