- name: Processar cobertura e atualizar Quality Gate
  run: |
    COVERAGE=$(xmllint --xpath 'string(/coverage/@line-rate)' coverage.xml)
    PERCENT=$(printf "%.0f" "$(echo "$COVERAGE * 100" | bc -l)")
    echo "Cobertura: $PERCENT%"

    QG_RESPONSE=$(curl -s -H "ngrok-skip-browser-warning: true" \
      "${{ vars.SONAR_URL }}/api/qualitygates/show?name=$QUALITY_GATE_NAME" \
      -u "$SONAR_TOKEN:")

    if echo "$QG_RESPONSE" | jq -e '.errors' > /dev/null; then
      echo "Erro ao buscar Quality Gate:"
      echo "$QG_RESPONSE" | jq .
      exit 1
    fi

    # Alteração principal: buscar por 'new_coverage' em vez de 'coverage'
    CONDITION_ID=$(echo "$QG_RESPONSE" | jq -r --arg METRIC "new_coverage" \
      '.conditions[] | select(.metric == $METRIC) | .id')

    if [ -z "$CONDITION_ID" ]; then
      echo "Erro: Condição de cobertura não encontrada"
      echo "Conditions disponíveis:"
      echo "$QG_RESPONSE" | jq '.conditions'
      exit 1
    fi

    UPDATE_RESPONSE=$(curl -s -X POST -H "ngrok-skip-browser-warning: true" \
      "${{ vars.SONAR_URL }}/api/qualitygates/update_condition" \
      -u "$SONAR_TOKEN:" \
      -d "id=$CONDITION_ID" \
      -d "metric=new_coverage" \
      -d "error=$PERCENT" \
      -d "op=LT")

    if echo "$UPDATE_RESPONSE" | jq -e '.errors' > /dev/null; then
      echo "Erro ao atualizar Quality Gate:"
      echo "$UPDATE_RESPONSE" | jq .
      exit 1
    else
      echo "Quality Gate atualizado com sucesso!"
      echo "Nova condição: new_coverage < $PERCENT%"
    fi
  env:
    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
